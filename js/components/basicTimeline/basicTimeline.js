class BasicTimeline{componentEl=void 0;timelineEl=void 0;state={widthPerTick:0,data:void 0,startYear:0,endYear:0,index:0,componentWidth:0,componentHeight:0};constructor(e,t,n=0,s=!1,i=1995,a=2025){this.componentEl=e,this.state.data=t,this.state.index=n,this.state.wrap=s,this.state.startYear=i,this.state.endYear=a,this.init()}init(){this.componentEl.innerHTML="",this.render(this.componentEl,this.state.data),this.setIndex(this.state.index,!0),this.addEventHandlers(this.componentEl),this.state.componentWidth=this.componentEl.offsetWidth,this.state.componentHeight=this.componentEl.offsetHeight}handleResize(){let e=!1;this.componentEl.offsetWidth==this.state.componentWidth&&this.componentEl.offsetHeight==this.state.componentHeight||(e=!0),e&&(this.componentEl.innerHTML="",this.init())}render(e,t){this.renderTimelineBar(e),this.renderYearTicks(e,t),this.renderEventMarkers(e,t)}renderTimelineBar(e){e.innerHTML='\n            \x3c!-- Header --\x3e\n            <div class=\'timeline-header\'>\n                <div class=\'heading\'>\n                    <span>work</span><span>Experience</span>\n                </div>\n            </div>\n\n            \x3c!-- Timeline Component --\x3e\n            <div class=\'timeline-container\' tabIndex=\'0\'>\n                \x3c!-- <button id="backBtn" role="button">  &#5130; </button> --\x3e\n                <div class="timeline"></div>\n                \x3c!-- <button id="forwardBtn" role="button"> &#5125; </button> --\x3e\n            </div>\n            '}renderYearTicks(e,t){const n=e.querySelector(".timeline"),s=this.state.endYear-this.state.startYear,i=n.offsetWidth/s;n.dataset.widthPerTick=i,this.state.widthPerTick=i;let a=this.state.startYear,r=-10;for(;a<=this.state.endYear;a++)a==this.state.endYear&&(r+=1),this.renderYearTick(t,a,n,r),r+=i}renderYearTick(e,t,n,s){if(void 0!==e.find((e=>e.yearStart==t)))return;let i="";i=t%5==0?`<div class='year-marker' style='left:${s}px'>                    \n                            <div class='year-arm' style='height: 25px; top: -12px;'></div>                                            \n                        </div>`:`<div class='year-marker' style='left:${s}px'>                    \n                            <div class='year-arm'></div>                    \n                        </div>`,n.innerHTML+=i}renderEventMarkers(e,t){const n=e.querySelector(".timeline");t.map(((e,t)=>{const s=(e.yearStart-this.state.startYear)*this.state.widthPerTick-20;this.renderEventMarker(t,e,n,s,0)}))}renderEventMarker(e,t,n,s,i){let a=`<div id='Marker${t.yearStart}-${t.yearEnd}' data-year=${t.yearStart} data-index=${e} class='event-marker' style='left:${s}px'>\n                        <div class='event-circle'></div>\n                        <div class='event-arm'></div>\n                        <div class='event-text'>${t.yearStart}</div>\n                        <div class='event-selected' style='width:${i}'>\n                    </div>`;n.innerHTML+=a}updateSelectedEventConnector(e,t=!1){let n=this.componentEl.querySelector(`#Marker${e.yearStart}-${e.yearEnd}`).querySelector(".event-selected"),s=(e.yearEnd-e.yearStart)*this.state.widthPerTick,i=t?0:250;window.setTimeout((()=>{t?(s=0,n.classList.add("no-transition")):n.classList.remove("no-transition"),n.style.width=`${s}px`}),i)}addEventHandlers(e){e.onkeydown=e=>{"37"==(e=e||window.event).keyCode&&this.setIndex(this.state.index-1),"39"==e.keyCode&&this.setIndex(this.state.index+1)};const t=e.querySelectorAll(".event-marker");for(let e=0;e<t.length;e++){const n=t[e].dataset.index;t[e].addEventListener("click",(()=>{this.setIndex(n)}))}}async destroy(){const e=await this.deconstructTimeline(this.componentEl);console.log("Finished.  Elements Destroyed: ",e),this.componentEl.classList.add("faded")}async deconstructTimeline(e){const t=e.querySelector(".timeline");let n=[];let s=Array.from(t.children),i=0;s.forEach((e=>{n.push({el:e,delay:i,action:"drop"}),i+=75}));const a=e.querySelector(".timeline-container");Array.from(a.children).forEach((e=>{n.push({el:e,delay:i,action:"fade"}),i+=75}));const r=n.map((e=>this.deconstructElement(e).then((e=>({...el,notes:e})))));return await Promise.all(r)}deconstructElement(e){return new Promise((t=>{setTimeout((()=>{e.el.classList.add("deconstruct"),t(`element ${e.el} - ${e.delay}`)}),e.delay)}))}dispatchOnIndexChange(e){const t=new CustomEvent("onindexchange",{bubbles:!0,detail:{index:e}});this.componentEl.dispatchEvent(t)}setIndex(e,t=!1){let n=e,s=this.state.data.length-1;if(n<0&&(n=this.state.wrap?s:0),n>s&&(n=this.state.wrap?0:s),!t&&n==this.state.index)return void console.log("bailing - index did not change.");this.state.index=n;let i=this.state.data[this.state.index].yearStart,a=this.state.data[this.state.index].yearEnd;document.querySelectorAll(".event-marker").forEach((e=>{e.classList.remove("fade-to-back"),e.classList.remove("selected")})),this.state.data.map((e=>{if(i!=e.yearStart&&i<e.yearStart&&e.yearStart<a){this.componentEl.querySelector(`#Marker${e.yearStart}-${e.yearEnd}`).classList.add("fade-to-back")}if(i==e.yearStart||a==e.yearStart){this.componentEl.querySelector(`#Marker${e.yearStart}-${e.yearEnd}`).classList.add("selected")}let t=e.yearStart!==i||e.yearEnd!==a;this.updateSelectedEventConnector(e,t)})),this.dispatchOnIndexChange(this.state.index)}}